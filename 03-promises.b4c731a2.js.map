{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEIC,EAAOC,SAASC,cAAc,SAG9BC,EAAS,EACbH,EAAKI,iBAAiB,UACtB,SAAsBC,GACpBA,EAAMC,iBACAC,SAASP,EAAKQ,MAAMC,OACrBT,EAAKU,KAAKD,MACjBN,EAASH,EAAKW,OAAOF,MACHG,WAKlB,SAAuBC,EAAGC,GACxB,IAAKD,EAAI,EAAGA,EAAIV,EAAQU,GAAK,EAAG,CACRE,KAAKC,SAAW,GAEpCJ,WAAWK,EAAAnB,GAASoB,OAAOC,QAAQ,sBAAkCC,OAAZP,EAAI,EAAE,QAAYO,OAANN,EAAM,OAAMA,GAEjFF,WAAWK,EAAAnB,GAASoB,OAAOG,QAAQ,oBAAgCD,OAAZP,EAAI,EAAE,QAAYO,OAANN,EAAM,OAAMA,E,EAXxDQ,GAAiB,I","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nlet form = document.querySelector('.form');\nlet delay = 0;\nlet step = 0;\nlet amount = 0;\nform.addEventListener(\"submit\", handleSubmit);\nfunction handleSubmit(event) {\n  event.preventDefault();\ndelay = parseInt(form.delay.value);\nstep = form.step.value;\namount = form.amount.value;\n  const timeout = setTimeout(createPromise(), 10000);\n\n//createPromise(amount, step)\n};\n\nfunction createPromise(i, delay) {\n  for (i = 0; i < amount; i += 1) {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      setTimeout(Notiflix.Notify.success(`Fulfilled promise  ${i + 1} in ${delay}ms`), delay);\n    } else {\n      setTimeout(Notiflix.Notify.failure(`Rejected promise ${i + 1} in ${delay}ms`), delay);\n    }\n  }\n}"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$amount","addEventListener","event","preventDefault","parseInt","delay","value","step","amount","setTimeout","i","delay1","Math","random","$parcel$interopDefault","Notify","success","concat","failure","$ce04d3a99e08e73b$var$createPromise"],"version":3,"file":"03-promises.b4c731a2.js.map"}