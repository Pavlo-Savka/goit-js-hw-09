{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SACMC,EAAOC,SAASC,cAAc,SAC9BC,EAAgB,SAACC,EAAUC,GAW/B,OAVgB,IAAIC,SAAQ,SAACC,EAASC,GACpCC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,sBAAqCK,OAAfR,EAAS,QAAWQ,OAALP,EAAK,OAElDG,EAAO,oBAAmCI,OAAfR,EAAS,QAAWQ,OAALP,EAAK,M,GAEhDA,E,KAIPL,EAAKa,iBAAiB,UACtB,SAAsBC,GACpBA,EAAMC,iBAIN,IAHA,IAAMC,EAAQC,SAASjB,EAAKgB,MAAME,OAC5Bb,EAAOL,EAAKK,KAAKa,MACjBC,EAASnB,EAAKmB,OAAOD,MAClBE,EAAI,EAAGA,EAAID,EAAQC,GAAK,EAC/BjB,EAAciB,EAAI,EAAGf,EAAOe,EAAIJ,GAC7BK,MAAK,SAAAH,GACJI,EAAAxB,GAASyB,OAAOC,QAAQN,E,IAEzBO,OAAM,SAAAC,GACLJ,EAAAxB,GAASyB,OAAOI,QAAQD,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nconst form = document.querySelector('.form');\nconst createPromise = (position, step) => {\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve(`Fulfilled promise  ${position} in ${step}ms`);\n      } else {\n        reject(`Rejected promise ${position} in ${step}ms`);\n      }\n    }, step);\n  });\n  return promise;\n};\nform.addEventListener('submit', handleSubmit);\nfunction handleSubmit(event) {\n  event.preventDefault();\n  const delay = parseInt(form.delay.value);\n  const step = form.step.value;\n  const amount = form.amount.value;\n  for (let i = 0; i < amount; i += 1) {\n    createPromise(i + 1, step * i + delay)\n      .then(value => {\n        Notiflix.Notify.success(value);\n      })\n      .catch(error => {\n        Notiflix.Notify.failure(error);\n      });\n  }\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","step","Promise","resolve","reject","setTimeout","Math","random","concat","addEventListener","event","preventDefault","delay","parseInt","value","amount","i","then","$parcel$interopDefault","Notify","success","catch","error","failure"],"version":3,"file":"03-promises.0bf6f689.js.map"}